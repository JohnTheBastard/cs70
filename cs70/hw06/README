Authors: Russ Osborn, John Hearn
Date: 27 February, 2004
CS 70 Assignment #6

----------------------------------------------------------------------
Problem 1 (Weiss 6.15a)  Big-Oh analysis of running time.

Fragment #1
for( int i = 0; i < n; i++ )
    sum++;

Line-by-line breakdown of running time:

sum++ =>
constant run time k

for( int i = 0; i < n; i++ ) => 
constant run time l executed n+1 times
Loop contents executed n times

Total: (n+1)*l + n*k = (l+k)*n +l
Dominant term: n*(a constant)

Big-Oh:  O(n)



Fragment #2
for( int i = 0; i < n; i+=2 )
    sum++;

Line-by-line breakdown of running time:

sum++ => 
constant run time k

for( int i = 0; i < n; i++ ) => 
constant run time l executed (n/2) + 1 times
Loop contents executed n/2 times

Total: (n/2+1)*l + k*n/2 = (l+k)*n/2 +l/2
Dominant term: n*(a constant)

Big-Oh:  O(n)



Fragment #3
for( int i = 0; i < n; i++ )
    for( int j = 0; j < n; j++)
        sum++;

Line-by-line breakdown of running time:

sum++ => 
constant run time k

for( int j = 0; j < n; j++ ) => 
constant run time l executed n+1 times
Loop contents executed n times

for( int i = 0; i < n; i++ ) =>
constant run time m executed n+1 times
Loop contents executed n times

Total: (n+1)*m +  n*(n+1)*l + n*n*k = (k+l)*n^2 + (l+m)*n + m
Dominant term: (a constant)*n^2

Big-Oh:  O(n^2)



Fragment #4
for( int i = 0; i < n; i++ )
    sum++;
for( int j = 0; j < n; j++ )
    sum++;

Line-by-line breakdown of running time:

sum++ => 
constant run time k

for( int i = 0; i < n; i++ ) => 
constant run time l executed n+1 times
Loop contents executed n times

for( int j = 0; j < n; j++ ) =>
constant run time l executed n+1 times

Total: 2*((n+1)*l + n*k) = 2*(l+k)*n + 2*l
Dominant term: n*(a constant)

Big-Oh:  O(n)



Fragment #5
for( int i = 0; i < n; i++ )
    for( int j = 0; j < n * n; j++)
        sum++;

Line-by-line breakdown of running time:

sum++ => 
constant run time k

for( int j = 0; j < n * n; j++ ) => 
constant run time l executed (n*n)+1 times
Loop contents executed n*n times

for( int i = 0; i < n; i++ ) =>
constant run time m executed n+1 times
Loop contents executed n times

Total: (n+1)*m +  n*(n*n+1)*l + n*n*n*k = (k+l)*n^3 + (l+m)*n + m
Dominant term: (a constant)*n^3

Big-Oh:  O(n^3)



Fragment #6
for( int i = 0; i < n; i++ )
    for( int j = 0; j < i; j++)
        sum++;

Line-by-line breakdown of running time:

sum++ => 
constant run time k
O(1)

for( int j = 0; j < i; j++ ) => 
constant run time l executed i+1 times
for j = 0, 1, 2, 3,..., n-1, n
=> l*(n)*(n+1)/2
O(n^2)
Loop contents executed i times
for j = 1, 2, 3,...,n-3, n-2
(Note that loop does not execute for i = 0)
=>(loop contents runtime)*(n-1)*(n-2)/2
O(n^2)

for( int i = 0; i < n; i++ ) =>
constant run time m executed n+1 times
Loop contents executed n times
O(n)

Total: l*(n^2 + n)/2 + k*(n^2 - 3*n + 2)/2 + m*n + m
=((l+k)/2)*n^2 + (m - (3k-l)/2)*n + (k + m)
Dominant term: (a constant)*n^2

Big-Oh:  O(n^2)



Fragment #7
for( int i = 0; i < n; i++ )
    for( int j = 0; j < n * n; j++ )
        for( k = 0; k < j; k++ )
            sum++;

Line-by-line breakdown of running time (inside out):

sum++ =>
constant run time d
O(1)

for( k = 0; k < j; k++ )
constant run time c executed j+1 times
for k = 0, 1, 2, ..., n^2-1, n^2
=> c*(n^2)*(n^2 + 1)/2
Level 3 loop contents executed j times
for j = 1, 2, 3, ... n^2-2, n^2-1
=> (Level 3 loop contents)*(n^2)*(n^2 - 1)/2
(Note: loop contents not executed for j = 0)
O(n^4)

for( int j = 0; j < n * n; j++ ) => 
constant run time m executed n^2 + 1 times
Level 2 loop contents executed j times
O(n^2)

for( int i = 0; i < n; i++ ) =>
constant run time l executed n+1 times
Level 1 loop contents executed n times
O(n)


Total: 
l*(n+1) + n*[m*(n^2 +1) + c*(n^2)*(n^2 + 1)/2 + ([n^2]*[n^2 -1]/2)*d]
Dominant term: (a constant)*n^4

Big-Oh:  O(n^4)

----------------------------------------------------------------------
Problem 2 (Weiss 6.16a)  Big-Oh analysis of running time.

for( int i = 1; i < n; i++ )
    for( int j = 0; j < i * i; j++ )
        if( j % i == 0 )
            for( int k = 0; k < j; k++ )
                sum++;

Line-by-line breakdown of running time:

sum++ =>
constant run time d
O(1)

for( k = 0; k < j; k++ )
constant run time c executed j+1 times
Level 3 loop contents executed j times
j = 1*i, 2*i, 3*i, ..., (i-1)*i
due to if-modulus statement
=>(Level 3 loop contents run time)*i*(i*(i-1)/2)
i = 1, 2, 3, ..., n-1
=>(Level 3 loop contents)*[(n^2)*([n-1]^2)/8 - (n-1)*n*(n+1)/12]
O(n^4)

for( int j = 0; j < i * i; j++ ) 
    if( j % i == 0 ) =>
constant run time m executed n^2 + 1 times
Level 2 loop contents executed i times
i = 2, 3, 4, ..., n-1
=> (Level 2 loop contents running time)*(n+1)*(n-2)/2
O(n^2)

for( int i = 1; i < n; i++ ) =>
constant run time l executed n times
Level 1 loop contents executed n-1 times
O(n)

Total: We ignore some lower order terms for readability.
d*((n^4)/8 - (n^3)/3 + (n^2)/8 + n/12)
Dominant term: (a constant)*n^4

Big-Oh:  O(n^4)



----------------------------------------------------------------------
Problem 3

Suppose that we define a linked list class with the following data fields.
    class Node {
        private:
            long value;
            Node *next;
    };

    class List {
        private:
            Node *head;       
    };

How long (in big-O terms) do the following operations take, as a
function of the length of the list, N? You may not assume any changes
in the Node or List data structures. For this problem and the next,
assume that any single call to new, new[], delete, or delete[] can be 
performed in O(1) time.


NOTE:  We assume adjusting pointers to be a constant-time operation,
so unless the number of pointers being changed is a function of n, we
ignore it in Big-Oh estimations in the following.

1. Making a copy of the list

For n nodes in list,
create n new nodes (O(n))
traverse list, copying each node (O(2n)=O(n))

Total: O(n)

2. Adding a value to the start of the list

Find beginning of list (O(1))
Add new node (O(1))

Total: O(1)

3. Adding a value to the end of the list

Assuming no pointer to tail,
Traverse list (O(n))
Add new node (O(1))

Total: O(n)

4. Removing the first value from the list

Find first node (O(1))
Delete node (O(1))

Total: (O(1))

5. Removing the last value from the list

Traverse to last node (O(n))
Delete node (O(1))

Total: (O(n))

6. Determining whether the list contains some value V

Traverse list, comparing values to V:
best case O(2*1), worst case O(2n)

Total: O(n)


----------------------------------------------------------------------
Problem 4

Suppose that we modify the classes from Problem 3 to store C++ strings
of maximum length M characters, rather than longs. Does this affect
the running of any of the operations? If so, which one(s) change, why,
and what is/are the new expression(s) for the running time(s)?

Notice that each list should contain its own private copy of the
strings stored in it. Lists should not share strings with other lists,
or with other parts of the code.

You should assume that when a string is copied or assigned, a complete
copy is made of that string. (Interestingly, this assumption is not
true for all implementations of the C++ library, but we'll ignore that
fact for this assignment.) You should also assume that the string type
has been implemented in an efficient and effective fashion (i.e.,
there are no O(N^2) implementations of things that can be done in O(N)
time).

1. Making a copy of the list

Best case: O(n), every string is length 1
Worst case: 0(m*n)

Total: O(m*n)

2. Adding a value to the start of the list

Same as problem 3, but added factor of copying string.

Total: O(m)

3. Adding a value to the end of the list

Same as problem 3, but added factor of copying string.

Total: O(n+m)

4. Removing the first value from the list

No Change.

Total: O(1)

5. Removing the last value from the list

No Change,

Total: O(n)

6. Determining whether the list contains some value V

Must compare string to V, a worst case of O(m) operation

Total: O(m*n)


----------------------------------------------------------------------
Problem 5

Consider the following functions, which use the List and Node data
structures from Problem 3:

    // returns the length of the list
    int List::length()
    {
        Node *current = head;
        int output = 0;

        while (current != NULL) {
            output++;
            current = current->next;
        }

        return output; 
    }

    // returns the nth value in the list
    long List::nth(int n)
    {
        if (n >= length() || n < 0)
            error("List::nth out of range position");

        Node *current = head;
        for (i = 0; i < n; i++) {
            current = current->next;
        }

        return current->value;
    }

    // prints all the values in the list
    void List::print()
    {
        for (i = 0; i < length(); i++) {
            cout << nth(i) << endl;
        }
    }

Analyze the running times of these three functions. For each function,
show how it could be recoded (if possible) so as to improve its
asymptotic running time, and provide an analysis of the new running
time. If no improvement is possible, explain why. You are only allowed
to modify the executable code; you may not modify or add any fields to
the Node and List data structures.


length()
This function already has O(n) running time.  We could maye reduce its
running time by a constant factor, but it would still be O(n).  By
including a counter in the data structure you could reduce running
time to constant, but that is not allowed by the specification of the
question.

nth(int n)
This function also has O(n) run time.  We could reduce the run time by
constant time by eliminating the if statement, and changing the for
loop with a while loop, terminated if either by i == n, or current ==
null.  But again, we cannot reduce the run time to less than O(n).

print()
This function is currently O(n^3) since the for loop runs in O(n) time, the 
call to length() runs in O(n), and the nth() call runs in O(n) time.  We can 
reduce it to O(n) by changing the body of the function to:

Node *currentNode = head;

while (currentNode != NULL)
{
    cout << &currentNode << endl;
    currentNode = currentNode->next;
}

